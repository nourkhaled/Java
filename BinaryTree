// Java program for an efficient solution to check if
// a given array can represent Preorder traversal of
// a Binary Search Tree
import java.util.* ; 
@SuppressWarnings("unused")
public class BinaryTree {
	Node root ; 
	class Node 
	{
 	   int key ;
 	   Node right ;
 	   Node left ; 
 	   public Node(int data) 
 	   {
 		   key = data ; 
 		   right = left = null ;
 	   }
    }
	
	int minimumDepth()
    {
        return minDepth(root);
    }
	int minDepth (Node Treenode){
		if (root == null) {return 0;} 
		if (root.left == null && root.right == null){return 1 ;}
		if (root.left == null) {
			return minDepth(root.right)+ 1  ;
		}
		if (root.right == null){
			return minDepth(root.left) +1  ; 
		}
		
		return Math.min(minDepth(root.left), minDepth(root.right)) ; 
		
	}
   
	boolean canRepresentBST(int pre[], int n) {
		// Create an empty stack
        Stack<Integer> s = new Stack<Integer>();
        int root = Integer.MIN_VALUE ; 
     // Traverse given array
        for (int i=0 ; i< n ; i++){
        	// If we find a node who is on right side
            // and smaller than root, return false
        	if (pre[i] < root) {
        		return false ; 
        	}
        	// If pre[i] is in right subtree of stack top,
            // Keep removing items smaller than pre[i]
            // and make the last removed item as new
            // root.
        	while (!s.empty() && s.peek() < pre[i]) {
        		root = s.peek() ; 
        		s.pop() ; 
        	}
        	// At this point either stack is empty or
            // pre[i] is smaller than root, push pre[i]
            s.push(pre[i]);
        	
        }
        
		return true ;
	}
	
	public static void main(String[] args)
	{
		BinaryTree pretree = new BinaryTree () ; 
		int[] pre1 = new int[]{40, 30, 35,80,100};
		int n = pre1.length ; 
		if (pretree.canRepresentBST(pre1, n)== true)
		{
			System.out.println("true");
        } else 
        {
            System.out.println("false");
		}
		
		int[] pre2 = new int[]{40, 30, 35, 20, 80, 100};
        int n1 = pre2.length;
        if (pretree.canRepresentBST(pre2, n1) == true) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }

	}

}
