/*A program that check if the tree is BST or not */ 
class Node {
    	int data ;
    	Node right , left ;
    	 public Node(int item)
    	    {
    	        data = item;
    	        left = right = null;
    	    }
    	
    }
    
public class BST {
    
    Node root ; 
    boolean BST(){
    	return isBSTUtil(root, Integer.MIN_VALUE , Integer.MAX_VALUE);
    	
    }
    // fn returns true if the tree is BST and false if not
    boolean isBSTUtil(Node node , int min , int max)
    {
    	 /* an empty tree is BST */
        if (node == null)
            return true;
        
        if (node.data < min || node.data > max ) {
        	return false ;
        }
        /* otherwise check the subtrees recursively
        tightening the min/max constraints */
        // Allow only distinct values
        
        return (isBSTUtil(node.left, min, node.data-1) &&
                isBSTUtil(node.right, node.data+1, max));
        
    
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BST tree = new BST () ; 
		tree.root = new Node(4) ;
		tree.root.left = new Node(2) ;
		tree.root.right = new Node(5) ;
		tree.root.left.left = new Node(1) ;
		tree.root.left.right = new Node(3) ;
		
		if(tree.BST()){
			System.out.println("Is BST") ;
			
		}else {
		System.out.println("Is not BST") ;}
		
		

	}

}
