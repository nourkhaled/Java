/* * Java class to represent circular linked list data structure. */ 
import java.util.*;
@SuppressWarnings("unused")
	public class LinkedList
	{ 
	    Node head; 
		public LinkedList(){ this.head = new Node("head"); }
	    public Node head() { return head;} 
	public void appendIntoTail(Node node) 
	{ 
		Node current = head; //find last element of LinkedList i.e. tail
	while(current.next() != null)
	{ current = current.next(); }
	//appending new node to tail in LinkedList 
	current.setNext(node); 
	}
	public boolean isCyclic(){
		Node fast = head; 
		Node slow = head;
	while(fast!= null && fast.next != null)
	{ 
		fast = fast.next.next; 
		slow = slow.next;
	//if fast and slow pointers are meeting then LinkedList is cyclic 
	if(fast == slow )
	{ return true; }} 
	return false; 
	}

	public static class Node {
		 Node next; 
	     String data;
		public Node(String data) { this.data = data; }
		public String data() { return data; }
		public void setData(String data) { this.data = data;} 
		public Node next() { return next; }
		public void setNext(Node next) { this.next = next; } 
	} 
	
	public static void main (String[] args)
	{
		LinkedList linkedList = new LinkedList();
		
		linkedList.appendIntoTail(new LinkedList.Node("1"));
		linkedList.appendIntoTail(new LinkedList.Node("2"));
		LinkedList.Node test = new LinkedList.Node("3");
		/*linkedList.appendIntoTail(test);
		linkedList.appendIntoTail(new LinkedList.Node("4"));
		linkedList.appendIntoTail(new LinkedList.Node("5"));
		linkedList.appendIntoTail(test);*/
		
		if (linkedList.isCyclic()){
			
			System.out.println("it is a cyclic list") ; 
		}
		else {
			System.out.println("it is not a cyclic list") ;
		}
		
		
	}
}


